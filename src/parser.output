Grammar

    0 $accept: program $end

    1 comma_expression: %empty
    2                 | expression
    3                 | comma_expression ',' expression

    4 expression: INTEGER_LITERAL
    5           | NAME
    6           | NAME '(' comma_expression ')'
    7           | expression '+' expression
    8           | expression '-' expression
    9           | '-' expression
   10           | '(' expression ')'

   11 statements: statement
   12           | statements statement

   13 scope: '{' '}'
   14      | '{' statements '}'

   15 arg_list: %empty
   16         | NAME
   17         | arg_list ',' NAME

   18 statement: expression ';'
   19          | NAME '=' expression ';'
   20          | PRINT expression ';'
   21          | FUNC NAME '(' arg_list ')' scope

   22 program: statement
   23        | program statement


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 10 21
')' (41) 6 10 21
'+' (43) 7
',' (44) 3 17
'-' (45) 8 9
';' (59) 18 19 20
'=' (61) 19
'{' (123) 13 14
'}' (125) 13 14
error (256)
PRINT (258) 20
FUNC (259) 21
NAME (260) 5 6 16 17 19 21
INTEGER_LITERAL (261) 4
UMINUS (262)


Nonterminals, with rules where they appear

$accept (17)
    on left: 0
comma_expression (18)
    on left: 1 2 3, on right: 3 6
expression (19)
    on left: 4 5 6 7 8 9 10, on right: 2 3 7 8 9 10 18 19 20
statements (20)
    on left: 11 12, on right: 12 14
scope (21)
    on left: 13 14, on right: 21
arg_list (22)
    on left: 15 16 17, on right: 17 21
statement (23)
    on left: 18 19 20 21, on right: 11 12 22 23
program (24)
    on left: 22 23, on right: 0 23


State 0

    0 $accept: . program $end

    PRINT            shift, and go to state 1
    FUNC             shift, and go to state 2
    NAME             shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 4
    '-'              shift, and go to state 5
    '('              shift, and go to state 6

    expression  go to state 7
    statement   go to state 8
    program     go to state 9


State 1

   20 statement: PRINT . expression ';'

    NAME             shift, and go to state 10
    INTEGER_LITERAL  shift, and go to state 4
    '-'              shift, and go to state 5
    '('              shift, and go to state 6

    expression  go to state 11


State 2

   21 statement: FUNC . NAME '(' arg_list ')' scope

    NAME  shift, and go to state 12


State 3

    5 expression: NAME .
    6           | NAME . '(' comma_expression ')'
   19 statement: NAME . '=' expression ';'

    '('  shift, and go to state 13
    '='  shift, and go to state 14

    $default  reduce using rule 5 (expression)


State 4

    4 expression: INTEGER_LITERAL .

    $default  reduce using rule 4 (expression)


State 5

    9 expression: '-' . expression

    NAME             shift, and go to state 10
    INTEGER_LITERAL  shift, and go to state 4
    '-'              shift, and go to state 5
    '('              shift, and go to state 6

    expression  go to state 15


State 6

   10 expression: '(' . expression ')'

    NAME             shift, and go to state 10
    INTEGER_LITERAL  shift, and go to state 4
    '-'              shift, and go to state 5
    '('              shift, and go to state 6

    expression  go to state 16


State 7

    7 expression: expression . '+' expression
    8           | expression . '-' expression
   18 statement: expression . ';'

    '+'  shift, and go to state 17
    '-'  shift, and go to state 18
    ';'  shift, and go to state 19


State 8

   22 program: statement .

    $default  reduce using rule 22 (program)


State 9

    0 $accept: program . $end
   23 program: program . statement

    $end             shift, and go to state 20
    PRINT            shift, and go to state 1
    FUNC             shift, and go to state 2
    NAME             shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 4
    '-'              shift, and go to state 5
    '('              shift, and go to state 6

    expression  go to state 7
    statement   go to state 21


State 10

    5 expression: NAME .
    6           | NAME . '(' comma_expression ')'

    '('  shift, and go to state 13

    $default  reduce using rule 5 (expression)


State 11

    7 expression: expression . '+' expression
    8           | expression . '-' expression
   20 statement: PRINT expression . ';'

    '+'  shift, and go to state 17
    '-'  shift, and go to state 18
    ';'  shift, and go to state 22


State 12

   21 statement: FUNC NAME . '(' arg_list ')' scope

    '('  shift, and go to state 23


State 13

    6 expression: NAME '(' . comma_expression ')'

    NAME             shift, and go to state 10
    INTEGER_LITERAL  shift, and go to state 4
    '-'              shift, and go to state 5
    '('              shift, and go to state 6

    $default  reduce using rule 1 (comma_expression)

    comma_expression  go to state 24
    expression        go to state 25


State 14

   19 statement: NAME '=' . expression ';'

    NAME             shift, and go to state 10
    INTEGER_LITERAL  shift, and go to state 4
    '-'              shift, and go to state 5
    '('              shift, and go to state 6

    expression  go to state 26


State 15

    7 expression: expression . '+' expression
    8           | expression . '-' expression
    9           | '-' expression .

    $default  reduce using rule 9 (expression)


State 16

    7 expression: expression . '+' expression
    8           | expression . '-' expression
   10           | '(' expression . ')'

    '+'  shift, and go to state 17
    '-'  shift, and go to state 18
    ')'  shift, and go to state 27


State 17

    7 expression: expression '+' . expression

    NAME             shift, and go to state 10
    INTEGER_LITERAL  shift, and go to state 4
    '-'              shift, and go to state 5
    '('              shift, and go to state 6

    expression  go to state 28


State 18

    8 expression: expression '-' . expression

    NAME             shift, and go to state 10
    INTEGER_LITERAL  shift, and go to state 4
    '-'              shift, and go to state 5
    '('              shift, and go to state 6

    expression  go to state 29


State 19

   18 statement: expression ';' .

    $default  reduce using rule 18 (statement)


State 20

    0 $accept: program $end .

    $default  accept


State 21

   23 program: program statement .

    $default  reduce using rule 23 (program)


State 22

   20 statement: PRINT expression ';' .

    $default  reduce using rule 20 (statement)


State 23

   21 statement: FUNC NAME '(' . arg_list ')' scope

    NAME  shift, and go to state 30

    $default  reduce using rule 15 (arg_list)

    arg_list  go to state 31


State 24

    3 comma_expression: comma_expression . ',' expression
    6 expression: NAME '(' comma_expression . ')'

    ','  shift, and go to state 32
    ')'  shift, and go to state 33


State 25

    2 comma_expression: expression .
    7 expression: expression . '+' expression
    8           | expression . '-' expression

    '+'  shift, and go to state 17
    '-'  shift, and go to state 18

    $default  reduce using rule 2 (comma_expression)


State 26

    7 expression: expression . '+' expression
    8           | expression . '-' expression
   19 statement: NAME '=' expression . ';'

    '+'  shift, and go to state 17
    '-'  shift, and go to state 18
    ';'  shift, and go to state 34


State 27

   10 expression: '(' expression ')' .

    $default  reduce using rule 10 (expression)


State 28

    7 expression: expression . '+' expression
    7           | expression '+' expression .
    8           | expression . '-' expression

    $default  reduce using rule 7 (expression)


State 29

    7 expression: expression . '+' expression
    8           | expression . '-' expression
    8           | expression '-' expression .

    $default  reduce using rule 8 (expression)


State 30

   16 arg_list: NAME .

    $default  reduce using rule 16 (arg_list)


State 31

   17 arg_list: arg_list . ',' NAME
   21 statement: FUNC NAME '(' arg_list . ')' scope

    ','  shift, and go to state 35
    ')'  shift, and go to state 36


State 32

    3 comma_expression: comma_expression ',' . expression

    NAME             shift, and go to state 10
    INTEGER_LITERAL  shift, and go to state 4
    '-'              shift, and go to state 5
    '('              shift, and go to state 6

    expression  go to state 37


State 33

    6 expression: NAME '(' comma_expression ')' .

    $default  reduce using rule 6 (expression)


State 34

   19 statement: NAME '=' expression ';' .

    $default  reduce using rule 19 (statement)


State 35

   17 arg_list: arg_list ',' . NAME

    NAME  shift, and go to state 38


State 36

   21 statement: FUNC NAME '(' arg_list ')' . scope

    '{'  shift, and go to state 39

    scope  go to state 40


State 37

    3 comma_expression: comma_expression ',' expression .
    7 expression: expression . '+' expression
    8           | expression . '-' expression

    '+'  shift, and go to state 17
    '-'  shift, and go to state 18

    $default  reduce using rule 3 (comma_expression)


State 38

   17 arg_list: arg_list ',' NAME .

    $default  reduce using rule 17 (arg_list)


State 39

   13 scope: '{' . '}'
   14      | '{' . statements '}'

    PRINT            shift, and go to state 1
    FUNC             shift, and go to state 2
    NAME             shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 4
    '-'              shift, and go to state 5
    '('              shift, and go to state 6
    '}'              shift, and go to state 41

    expression  go to state 7
    statements  go to state 42
    statement   go to state 43


State 40

   21 statement: FUNC NAME '(' arg_list ')' scope .

    $default  reduce using rule 21 (statement)


State 41

   13 scope: '{' '}' .

    $default  reduce using rule 13 (scope)


State 42

   12 statements: statements . statement
   14 scope: '{' statements . '}'

    PRINT            shift, and go to state 1
    FUNC             shift, and go to state 2
    NAME             shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 4
    '-'              shift, and go to state 5
    '('              shift, and go to state 6
    '}'              shift, and go to state 44

    expression  go to state 7
    statement   go to state 45


State 43

   11 statements: statement .

    $default  reduce using rule 11 (statements)


State 44

   14 scope: '{' statements '}' .

    $default  reduce using rule 14 (scope)


State 45

   12 statements: statements statement .

    $default  reduce using rule 12 (statements)
